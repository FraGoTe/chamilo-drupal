<?php
// $Id$

/**
 * @file
 * Integration with Chamilo
 */

// Base URL
define('CHAMILO_BASE_URL', '/main/webservices');
// Base API KEY URL
define('CHAMILO_API_KEY_URL', '/main/auth/profile.php');
// Default amount of items(photos) per page.
define('CHAMILO_DEFAULT_IPP', 10);
// signature types
define('CHAMILO_GLOBAL_SIGNATURE', 1);
define('CHAMILO_PERUSER_SIGNATURE', 2);

/**
 * Implementation of hook_init().
 */
function chamilo_init() {
  global $user;
  // Implementation of Master SSO server
  if ($user->uid && isset($_GET['sso_referer'])) {
    chamilo_sso_auth($user);
  }
}

function chamilo_sso_protocol() {
  $protocols = array('http://', 'https://');
  return $protocols[variable_get('chamilo_sso_protocol', 0)];
}

/**
 * Given a drupal account, redirect to Vanity server including login info.
 */
function chamilo_sso_auth($account) {
  global $base_path;
  $master_auth_uri = filter_xss($_SERVER['HTTP_HOST']) . $base_path . '?q=user';
  // Master Cookie
  $sso = array(
    'username' => $account->name,
    'secret' => sha1($account->pass),
    'master_domain' => filter_xss($_SERVER['HTTP_HOST']),
    'master_auth_uri' => $master_auth_uri,
    'lifetime' => time() + 3600,
    'target' => filter_xss($_GET['sso_target']),
  );
  $cookie = base64_encode(serialize($sso));

  // Redirect to Vanity Server
  $url = chamilo_sso_protocol() . $master_auth_uri;
  $params = 'sso_referer='. urlencode($url) .'&sso_cookie='. urlencode($cookie);
  header('Location: '. filter_xss($_GET['sso_referer']) .'?'. $params);
  ?><html>
<head><title><?php print t('Redirection');?></title>
</head><body><?php print t('Please wait...');?></body></html><?php
  exit;
}

function chamilo_soap_call() {
  // Prepare params
  $params = func_get_args();
  $service = array_shift($params);
  $action = array_shift($params);
  
  ini_set('soap.wsdl_cache_enabled', 0);
  // Init SOAP client
  $service_path = chamilo_get_service_path($service);
  if ($service_path) {
    $client = new SoapClient($service_path);
    $chamilo_user = variable_get('chamilo_user', '');
    $signature = chamilo_get_signature();
    // Make call and its return result
    return call_user_method_array($action, $client, array_merge(array($chamilo_user, $signature), $params));
  } else {
    return FALSE;
  }
}

/**
 * Implementation of hook_user().
 */
function chamilo_user($op, &$edit, &$account, $category = NULL) {
  switch ($op) {
    case 'login':
      if ($account->uid && isset($_GET['sso_referer'])) {
        chamilo_sso_auth($account);
      }
      break;

    case 'load':
      static $chamilo_accounts;
      if (!isset($chamilo_accounts)) {
        $chamilo_accounts = variable_get('chamilo_accounts', array());
      }
      if (!isset($account->chamilo_user)) {
        $account->chamilo_user = in_array($account->uid, $chamilo_accounts);
      }
      chamilo_load_user_data($account);
      break;

    case 'form':
      $admin_access = user_access('administer chamilo');
      $connect_access = user_access('connect with own Chamilo account');
      $sync_access = user_access('sync users with Chamilo accounts');
      if ($category == 'account' && ($connect_access || $sync_access || $admin_access)) {
        $form['chamilo_settings'] = array(
          '#type' => 'fieldset',
          '#title' => t('Chamilo settings'),
          '#collapsible' => TRUE,
          '#weight' => 1,
          '#tree' => TRUE,
        );
        if ($sync_access || $admin_access) {
          $form['chamilo_settings']['sync_account'] = array(
            '#type' => 'checkbox',
            '#title' => t('Sync with a Chamilo account.'),
            '#default_value' => in_array($account->uid, variable_get('chamilo_accounts', array())),
            '#description' => t('If enabled, system will create or override a Chamilo account with same username, email and password.')
          );
        }
        if ($connect_access || $admin_access) {
          $form['chamilo_settings']['chamilo_user'] = array(
            '#type' => 'textfield',
            '#title' => t('Chamilo username'),
            '#default_value' => $account->chamilo_settings['user'],
            '#description' => t('Chamilo username.'),
          );

          $api_key_url = chamilo_sso_protocol() . variable_get('chamilo_server', '') . CHAMILO_API_KEY_URL;

          $form['chamilo_settings']['chamilo_apikey'] = array(
            '#type' => 'textfield',
            '#title' => t('Chamilo API key'),
            '#default_value' => $account->chamilo_settings['apikey'],
            '#description' => t('Chamilo API key. Find your API key in your Chamilo Profile by clicking <a href="@url">here</a>.',array('@url' => $api_key_url)),
          );
          $form['chamilo_settings']['chamilo_course_visibility'] = array(
            '#type' => 'checkboxes',
            '#title' => t('Trainings Visibilities'),
            '#description' => t('If this site displays a block with a list of your courses, will be filtered by criterias above.'),
            '#default_value' => !empty($account->chamilo_settings['course_visibility'])? $account->chamilo_settings['course_visibility']: array(),
            '#options' => chamilo_course_visibility(),
          );
          $form['chamilo_settings']['agenda_time_frame'] = array(
            '#type' => 'radios',
            '#title' => t('Agenda time frame'),
            '#default_value' => $account->chamilo_settings['agenda_time_frame'],
            '#options' => chamilo_agenda_time_frame(TRUE),
          );
        }
        return $form;
      }
      break;

    case 'update':
      $admin_access = user_access('administer chamilo');
      $connect_access = user_access('connect with own Chamilo account');
      $sync_access = user_access('sync users with Chamilo accounts');

      if ($category == 'account') {
        
        $users = variable_get('chamilo_accounts', array());
        // Sync account
        if ($edit['chamilo_settings']['sync_account'] && ($sync_access || $admin_access)) {
          
          // Check if user has chamilo account
          $chamilo_user_courses = chamilo_soap_call('user_info', 'DokeosWSCourseListOfUser');
          // Deterimine wether to Create or Override account at chamilo
          if (is_array($chamilo_user_courses)) {
            $action = 'DokeosWSCreateUser';
          }
          else {
            $action = 'DokeosWSUpdateUser';
          }
          // Make call
          $user = chamilo_soap_call('registration', $action, array(
            'loginname' => $edit['name'], 'password' => ($edit['pass'] ? $edit['pass'] : $account->pass),
            'password_crypted' => 1, 'email' => $edit['mail'],
          ));

          // Save
          if (!isset($users[$account->uid])) {
            $users[$account->uid] = $account->uid;
            variable_set('chamilo_accounts', $users);
          }
          
          if ($connect_access || $admin_access) {
            chamilo_save_user_data($edit, $account, $category);
          } 
          
          drupal_set_message('User succesfully syncronized with Chamilo.');
        }
        // Unlink account
        else {
          // Save
          if (isset($users[$account->uid])) {
            unset($users[$account->uid]);
            variable_set('chamilo_accounts', $users);
          }
        }
        
        /* if (!isset($edit['chamilo_settings']['sync_account']) && ($sync_access || $admin_access)) {
          $users = variable_get('chamilo_accounts', array());
          // Sync account
          if ($edit['chamilo_settings']['sync_account']) {
            
            // Check as chamilo account
            $chamilo_account = chamilo_soap_call('user_manager', 'DokeosWSUserInfoFromUsername', array('name' => $edit['name']));
            // Deterimine wether to Create or Override account at chamilo
            if (isset($chamilo_account->firstName) ? $chamilo_account->username == '' : FALSE) {
              $action = 'DokeosWSCreateUser';
            }
            else {
              $action = 'DokeosWSUpdateUser';
            }
            // Make call
            $user = chamilo_soap_call('user_manager', $action, array(
              'loginname' => $edit['name'], 'password' => ($edit['pass'] ? $edit['pass'] : $account->pass),
              'password_crypted' => 1, 'email' => $edit['mail'],
            ));
            // Save
            if (!isset($users[$account->uid])) {
              $users[$account->uid] = $account->uid;
              variable_set('chamilo_accounts', $users);
            }
            drupal_set_message('User succesfully syncronized with Chamilo.');
          }
          // Unlink account
          else {
            // Save
            if (isset($users[$account->uid])) {
              unset($users[$account->uid]);
              variable_set('chamilo_accounts', $users);
            }
          }
        }
        if ($connect_access || $admin_access) {
          chamilo_save_user_data($edit, $account, $category);
        } */
      }
      break;
  }
}

function chamilo_load_user_data(&$account) {
  $result = db_query('SELECT duser, apikey, course_visibility, agenda_time_frame FROM {chamilo_user} WHERE uid = %d', $account->uid);
  while ($user_data = db_fetch_object($result)) {
    $account->chamilo_settings = array(
      'user' => $user_data->duser,
      'apikey' => $user_data->apikey,
      'course_visibility' => unserialize($user_data->course_visibility),
      'agenda_time_frame' => $user_data->agenda_time_frame,
    );
  }
}

function chamilo_save_user_data(&$edit, &$account, $category, $register = FALSE) {
  $data = &$edit['chamilo_settings'];
  
  // Pre-process courses visibility
  $data['chamilo_course_visibility'] = preg_grep('/^0$/', $data['chamilo_course_visibility'], PREG_GREP_INVERT);
  $data['chamilo_course_visibility'] = count($data['chamilo_course_visibility']) ? serialize($data['chamilo_course_visibility']) : NULL;

  // Look for data
  $save_data = FALSE;
  $fields = array(NULL, 'chamilo_user', 'chamilo_apikey', 'chamilo_course_visibility', 'agenda_time_frame');
  while($field = next($fields)) {
    if (!empty($data[$field]) && $data[$field]) {
      $save_data = TRUE;
      break;
    }
  }

  // Delete old user data
  db_query("DELETE FROM {chamilo_user} WHERE uid = %d", $account->uid);

  if ($save_data) {
    // Save data
    db_query("INSERT INTO {chamilo_user} (uid, duser, apikey, course_visibility, agenda_time_frame) VALUES (%d, '%s', '%s', '%s', %d)", $account->uid, $data['chamilo_user'], $data['chamilo_apikey'], $data['chamilo_course_visibility'], $data['agenda_time_frame']);
  }
}

/**
 * Implementation of hook_menu().
 */
function chamilo_menu() {
  $items['admin/settings/chamilo'] = array(
    'title' => 'Chamilo',
    'description' => 'Configure integration settings with Chamilo.',
    'page callback' => 'chamilo_admin_settings',
    'access callback' => 'user_access',
    'access arguments' => array('administer chamilo'),
    'file' => 'chamilo.admin.inc',
  );
  return $items;
}

function chamilo_get_signature($type = CHAMILO_GLOBAL_SIGNATURE) {
  global $user;

  switch ($type) {
    case CHAMILO_PERUSER_SIGNATURE:
      chamilo_load_user_data($user);
      return sha1($user->chamilo_settings['user'] . $user->chamilo_settings['apikey']);
    case CHAMILO_GLOBAL_SIGNATURE:
      $chamilo_user = variable_get('chamilo_user', '');
      $chamilo_apikey = variable_get('chamilo_appkey', '');
      return sha1($chamilo_user . $chamilo_apikey);
    default:
      return '';
  }
}

/**
 * Implementation of hook_block().
 *
 * Generates the administrator-defined blocks for display.
 */
function chamilo_block($op = 'list', $delta = 0, $edit = array()) {
  global $user;

  switch ($op) {
    case 'list':
      $blocks = array();
      $blocks[0]['info'] = t('Chamilo trainings'); // global configuration
      $blocks[1]['info'] = t('My Chamilo agenda'); // per user
      $blocks[2]['info'] = t('My Chamilo trainings'); // per user
      return $blocks;
    case 'view':
      if (variable_get('chamilo_server', '') == '') {
        drupal_set_message(t("Chamilo module yet not configured, can't display blocks."));
        return;
      }
      switch ($delta) {
        case 0:
          $signature = chamilo_get_signature();
          $chamilo_user = variable_get('chamilo_user', '');
          $service = chamilo_get_service_path('courses_list');
          $client = new SoapClient($service);
          //exit('<pre>'.print_r($service,TRUE));
          $data['subject'] = t('Chamilo trainings');
          $chamilo_courses_block_items = variable_get('chamilo_courses_block_items', array('public'));
          foreach ($chamilo_courses_block_items as $key => $item) {
            if ($item === 0) {
              unset($chamilo_courses_block_items[$key]);
            }
          }
          $visibilities = implode(',', $chamilo_courses_block_items);
          $courses = $client->DokeosWSCourseList($chamilo_user, $signature, $visibilities);
          $data['content'] = theme_chamilo_course_list($courses);
          break;
        case 1:
          chamilo_load_user_data($user);
          $signature = chamilo_get_signature(CHAMILO_PERUSER_SIGNATURE);
          $service = chamilo_get_service_path('user_info');
          $data['subject'] = t('My Chamilo agenda');
          $agenda_time_frame = !empty($user->chamilo_settings['agenda_time_frame'])? $user->chamilo_settings['agenda_time_frame']: 30;
          $datestart = (int) date('Ymd');
          $dateend = (int) date('Ymd', strtotime("+$agenda_time_frame days"));
          $client = new SoapClient($service);
          $agenda = $client->DokeosWSEventsList($user->chamilo_settings['user'], $signature, $datestart, $dateend);
          $data['content'] = theme_chamilo_user_agenda_list($agenda);
          break;
        case 2:
          chamilo_load_user_data($user);
          $signature = chamilo_get_signature(CHAMILO_PERUSER_SIGNATURE);
          $service = chamilo_get_service_path('user_info');
          $data['subject'] = t('My Chamilo trainings');
          $client = new SoapClient($service);
          $agenda = $client->DokeosWSCourseListOfUser($user->chamilo_settings['user'], $signature);
          $data['content'] = theme_chamilo_course_list($agenda);
          break;
      }
      return $data;
      break;
    case 'configure':
      switch ($delta) {
        case 0;
          $form['items'] = array(
            '#type' => 'checkboxes',
            '#title' => t('Trainings Visibilities'),
            '#default_value' => variable_get('chamilo_courses_block_items', array()),
            '#options' => chamilo_course_visibility(),
          );
          return $form;
      }
      break;
    case 'save':
      switch ($delta) {
        case 0;
          variable_set('chamilo_courses_block_items', $edit['items']);
          break;
      }
  }
}

/**
 * Implementation of hook_theme().
 */
function chamilo_theme($existing, $type, $theme, $path) {
  return array(
    'chamilo_course_list' => array(
      'arguments' => array('courses' => NULL),
    ),
    'chamilo_user_agenda_list' => array(
      'arguments' => array('agenda_items' => NULL),
    ),
    'chamilo_course_list' => array(
      'arguments' => array('courses' => NULL),
    ),
  );
}

/**
 * Implementation of hook_theme (or should be)
 * @param   Array
 *    A list of course details as returned by chamilo_curl_exec()
 */
function theme_chamilo_course_list($courses) {
  if (!is_array($courses)) return;
  if (count($courses)) {
    drupal_add_css(drupal_get_path('module', 'chamilo') .'/chamilo.css', 'module', 'all', FALSE);
    ob_start();
    ?><ul><?php
    foreach ($courses as $course) {
?><li class="chamilo-course">
<span class="chamilo-course-title"><a href="<?php print $course->url ?>"><?php print $course->title ?></a></span>
<span class="chamilo-course-info"><?php print $course->language .' - '. $course->teacher?></span>
</li><?php
    }
    ?></ul><?php
    $output = ob_get_contents(); ob_end_clean();
    return $output;
  }
}

function theme_chamilo_user_agenda_list($agenda_items) {
  if (!is_array($agenda_items)) return;
  $path = drupal_get_path('module', 'chamilo');
  drupal_add_css($path .'/chamilo.css', 'module', 'all', FALSE);
  $output = '';
  $agenda = array();
  foreach ($agenda_items as $item) {
    $html = '<span class="chamilo-event-title">'. l($item->title, $item->link) .'</span>';
    $html .= '<span class="chamilo-event-info">'. $item->coursetitle .'</span>';
    $html .= '<span class="chamilo-event-info">'. date('M j, Y, g:i a', strtotime($item->datestart)) .'</span>';
    $html .= '<span class="chamilo-event-info">'. date('M j, Y, g:i a', strtotime($item->dateend)) .'</span>';
    $agenda[] = $html;
  }
  $output .= theme('item_list', $agenda);
  return $output;
}

/**
 * Implementation of hook_perm().
 */
function chamilo_perm() {
  return array('administer chamilo', 'connect with own Chamilo account'/*, 'sync users with Chamilo accounts'*/);
}

/**
 * Return supported course visibility options
 */
function chamilo_course_visibility() {
  return array(
    'public' => t('public'),
    'private' => t('private'),
    'public-registered' => t('public registered'),
    'closed' => t('closed')
  );
}

function chamilo_agenda_time_frame($optional = FALSE) {
  static $time_frames;

  if (!is_array($time_frames)) {
    $time_keys = array(30 => '', 15 => '', 7 => '');
    // Describe time frames
    $time_frames = $optional ? array('' => t('Disabled')) : array();
    foreach ($time_keys as $f => $d) {
      $time_frames[$f] = t('between now and within next !n days', array('!n' => $f));
    }
  }

  return $time_frames;
}

/**
 * Given a $service name, return corresponding location and uri into an array.
 */
function chamilo_get_service_path($service) {
  static $services;
  $chamilo_server = variable_get('chamilo_server', '');
  if (!isset($services)) {
    $services = array('courses_list', 'user_info', 'registration');
  }
  if (in_array($service, $services)) {
    return chamilo_sso_protocol(). $chamilo_server . CHAMILO_BASE_URL .'/'. $service .'.soap.php?wsdl';
  }
}
